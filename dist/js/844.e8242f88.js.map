{"version":3,"file":"js/844.e8242f88.js","mappings":";;;;;;;;;;;;;;;;;AAuBO,MAAMA,EAAe,iCAKfC,EAA4B,gBAO5BC,EAAmC,KAOnCC,EAAgC;;;;;;;;;;;;;;;;;ACjBvC,MAAOC,UAAqBC,EAAAA,EAahCC,WAAAA,CAAYC,EAAwBC,EAAyBC,EAAU,GACrEC,MACEC,EAAYJ,GACZ,qBAAqBC,MAAYG,EAAYJ,OAHY,KAAOE,QAAPA,EAR7D,KAAAG,WAAgD,CAAEC,eAAgB,MAahEC,KAAKC,aAAeD,KAAKN,QAGzBQ,OAAOC,eAAeH,KAAMV,EAAac,U,CAG3C,UAAIC,GACF,OAAOL,KAAKL,O,CAGd,UAAIU,CAAOA,GACTL,KAAKL,QAAUU,C,CAMjBC,WAAAA,CAAYb,GACV,OAAOI,EAAYJ,KAAUO,KAAKP,I,CAMpC,kBAAIM,GACF,OAAOC,KAAKF,WAAWC,c,CAGzB,kBAAIA,CAAeA,GACjBC,KAAKF,WAAWC,eAAiBA,EAC7BC,KAAKF,WAAWC,eAClBC,KAAKN,QAAU,GAAGM,KAAKC,iBAAiBD,KAAKF,WAAWC,iBAExDC,KAAKN,QAAUM,KAAKC,Y,MAWdM,EChBAC,ED8CN,SAAUX,EAAYJ,GAC1B,MAAO,WAAaA,CACtB,C,SAEgBgB,IACd,MAAMf,EACJ,iFAEF,OAAO,IAAIJ,EAAaiB,EAAiBG,QAAShB,EACpD,CAEM,SAAUiB,EAAeC,GAC7B,OAAO,IAAItB,EACTiB,EAAiBM,iBACjB,WAAaD,EAAO,oBAExB,CAgBM,SAAUE,EAAcC,GAC5B,OAAO,IAAIzB,EACTiB,EAAiBS,eACjB,qBACED,EADF,yEAKJ,C,SAEgBE,IACd,MAAMvB,EACJ,8FAEF,OAAO,IAAIJ,EAAaiB,EAAiBW,gBAAiBxB,EAC5D,C,SAEgByB,IACd,OAAO,IAAI7B,EACTiB,EAAiBa,iBACjB,gFAEJ,CAEM,SAAUC,EAAaT,GAC3B,OAAO,IAAItB,EACTiB,EAAiBe,aACjB,4CAA8CV,EAAO,KAEzD,C,SAEgBW,IACd,OAAO,IAAIjC,EACTiB,EAAiBiB,qBACjB,2DAEJ,C,SAmBgBC,IACd,OAAO,IAAInC,EACTiB,EAAiBmB,SACjB,qCAEJ,CASM,SAAUC,EAAWC,GACzB,OAAO,IAAItC,EACTiB,EAAiBsB,YACjB,gBAAkBD,EAAM,KAE5B,CAEM,SAAUE,EAAqBf,GACnC,OAAO,IAAIzB,EACTiB,EAAiBwB,uBACjB,2BAA6BhB,EAAS,KAE1C,C,SAEgBiB,IACd,OAAO,IAAI1C,EACTiB,EAAiB0B,kBACjB,6CAEE9C,EACA,wCAEN,C,SAEgB+C,IACd,OAAO,IAAI5C,EACTiB,EAAiB4B,kBACjB,yDAEJ,C,SASgBC,IACd,OAAO,IAAI9C,EACTiB,EAAiB8B,gBACjB,kDAEJ,CAEM,SAAUC,EAAgBC,GAC9B,OAAO,IAAIjD,EACTiB,EAAiBiC,wBACjB,GAAGD,0JAEP,CAKM,SAAUE,EAAgB/C,GAC9B,OAAO,IAAIJ,EAAaiB,EAAiBmC,iBAAkBhD,EAC7D,C,SA+BgBiD,IACd,OAAO,IAAIrD,EACTiB,EAAiBqC,YACjB,gCAEJ,CAOM,SAAUC,EAAqBC,GACnC,OAAO,IAAIxD,EACTiB,EAAiBwC,uBACjB,kBACED,EADF,kHAKJ,CAMgB,SAAAE,EAAcC,EAAgBvD,GAC5C,OAAO,IAAIJ,EACTiB,EAAiB2C,eACjB,iCAAmCD,EAAS,MAAQvD,EAExD,CAYM,SAAUyD,EAAczD,GAC5B,MAAM,IAAIJ,EACRiB,EAAiB6C,eACjB,mBAAqB1D,EAEzB;;;;;;;;;;;;;;;;IA3QA,SAAYa,GAEVA,EAAA,qBACAA,EAAA,uCACAA,EAAA,uCACAA,EAAA,yCACAA,EAAA,mCACAA,EAAA,qCACAA,EAAA,+BACAA,EAAA,uCACAA,EAAA,+CACAA,EAAA,uCACAA,EAAA,uBAEAA,EAAA,2CACAA,EAAA,6BACAA,EAAA,mDACAA,EAAA,yCACAA,EAAA,yCACAA,EAAA,mDACAA,EAAA,qCACAA,EAAA,uCACAA,EAAA,mDACAA,EAAA,6BACAA,EAAA,mDACAA,EAAA,mCACAA,EAAA,mCACAA,EAAA,oDACD,EA5BD,CAAYA,IAAAA,EA4BX,K,MErFY8C,EAGX7D,WAAAA,CAA4BuB,EAAgBH,GAAhB,KAAMG,OAANA,EAC1Bf,KAAKsD,MAAQ1C,C,CAGf,QAAIA,GACF,OAAOZ,KAAKsD,K,CAGd,UAAIC,GACF,OAA4B,IAArBvD,KAAKY,KAAK4C,M,CAGnBC,aAAAA,GACE,MAAMC,EAASC,mBACf,MAAO,MAAQD,EAAO1D,KAAKe,QAAU,MAAQ2C,EAAO1D,KAAKY,K,CAG3DgD,mBAAAA,GACE,MAAMF,EAASC,mBACf,MAAO,MAAQD,EAAO1D,KAAKe,QAAU,I,CAGvC,yBAAO8C,CAAmBC,EAAsBC,GAC9C,IAAIC,EACJ,IACEA,EAAiBX,EAASY,YAAYH,EAAcC,E,CACpD,MAAOG,GAGP,OAAO,IAAIb,EAASS,EAAc,G,CAEpC,GAA4B,KAAxBE,EAAepD,KACjB,OAAOoD,EAEP,MAAMlC,EAAqBgC,E,CAI/B,kBAAOG,CAAYrC,EAAamC,GAC9B,IAAII,EAA4B,KAChC,MAAMC,EAAe,sBAErB,SAASC,EAASC,GAC6B,MAAzCA,EAAI1D,KAAK2D,OAAOD,EAAI1D,KAAK4C,OAAS,KACpCc,EAAIhB,MAAQgB,EAAIhB,MAAMkB,MAAM,GAAI,G,CAGpC,MAAMC,EAAS,YACTC,EAAU,IAAIC,OAAO,SAAWP,EAAeK,EAAQ,KACvDG,EAAY,CAAE7D,OAAQ,EAAGH,KAAM,GAErC,SAASiE,EAAWP,GAClBA,EAAIhB,MAAQwB,mBAAmBR,EAAI1D,K,CAErC,MAAMmE,EAAU,iBACVC,EAAsBjB,EAAKkB,QAAQ,OAAQ,OAC3CC,EAAsB,kBACtBC,EAAwB,IAAIR,OAChC,aAAaK,KAAuBD,OAAaX,MAAiBc,IAClE,KAEIE,EAAyB,CAAErE,OAAQ,EAAGH,KAAM,GAE5CyE,EACJtB,IAAS7E,EACL,sDACA6E,EACAuB,EAAmB,WACnBC,EAAqB,IAAIZ,OAC7B,aAAaU,KAAoBjB,KAAgBkB,IACjD,KAEIE,EAAsB,CAAEzE,OAAQ,EAAGH,KAAM,GAEzC6E,EAAS,CACb,CAAEC,MAAOhB,EAASiB,QAASf,EAAWgB,WAAYvB,GAClD,CACEqB,MAAOP,EACPQ,QAASP,EACTQ,WAAYf,GAEd,CACEa,MAAOH,EACPI,QAASH,EACTI,WAAYf,IAGhB,IAAK,IAAIgB,EAAI,EAAGA,EAAIJ,EAAOjC,OAAQqC,IAAK,CACtC,MAAMC,EAAQL,EAAOI,GACfE,EAAWD,EAAMJ,MAAMM,KAAKpE,GAClC,GAAImE,EAAU,CACZ,MAAME,EAAcF,EAASD,EAAMH,QAAQ5E,QAC3C,IAAImF,EAAYH,EAASD,EAAMH,QAAQ/E,MAClCsF,IACHA,EAAY,IAEd/B,EAAW,IAAId,EAAS4C,EAAaC,GACrCJ,EAAMF,WAAWzB,GACjB,K,EAGJ,GAAgB,MAAZA,EACF,MAAMxC,EAAWC,GAEnB,OAAOuC,C,QCnHEgC,EAGX3G,WAAAA,CAAY4G,GACVpG,KAAKqG,SAAWC,QAAQC,OAAUH,E,CAIpCI,UAAAA,GACE,OAAOxG,KAAKqG,Q,CAIdI,MAAAA,CAAOC,GAAa,GAAK;;;;;;;;;;;;;;;;GCErB,SAAUC,EACdC,EAKAC,EACAC,GAIA,IAAIC,EAAc,EAIdC,EAAsB,KAEtBC,EAAuB,KACvBC,GAAa,EACbC,EAAc,EAElB,SAAS1F,IACP,OAAuB,IAAhB0F,C,CAET,IAAIC,GAAoB,EAExB,SAASC,KAAmBC,GACrBF,IACHA,GAAoB,EACpBP,EAAkBU,MAAM,KAAMD,G,CAIlC,SAASE,EAAcC,GACrBT,EAAiBU,YAAW,KAC1BV,EAAiB,KACjBJ,EAAUe,EAAiBlG,IAAW,GACrCgG,E,CAGL,SAASG,IACHX,GACFY,aAAaZ,E,CAIjB,SAASU,EAAgBG,KAAqBR,GAC5C,GAAIF,EAEF,YADAQ,IAGF,GAAIE,EAGF,OAFAF,SACAP,EAAgBU,KAAK,KAAMD,KAAYR,GAGzC,MAAMU,EAAWvG,KAAcyF,EAC/B,GAAIc,EAGF,OAFAJ,SACAP,EAAgBU,KAAK,KAAMD,KAAYR,GAOzC,IAAIW,EAJAlB,EAAc,KAEhBA,GAAe,GAGG,IAAhBI,GACFA,EAAc,EACdc,EAAa,GAEbA,EAA6C,KAA/BlB,EAAcmB,KAAKC,UAEnCX,EAAcS,E,CAEhB,IAAIG,GAAU,EAEd,SAASC,EAAKC,GACRF,IAGJA,GAAU,EACVR,IACIR,IAGmB,OAAnBJ,GACGsB,IACHnB,EAAc,GAEhBU,aAAab,GACbQ,EAAc,IAETc,IACHnB,EAAc,I,CASpB,OALAK,EAAc,GACdP,EAAkBS,YAAW,KAC3BR,GAAa,EACbmB,GAAK,EAAK,GACTvB,GACIuB,CACT,CASM,SAAUA,EAAKE,GACnBA,GAAG,EACL;;;;;;;;;;;;;;;;GCrIM,SAAUC,EAAaC,GAC3B,YAAa,IAANA,CACT,CAOM,SAAUC,EAAiBD,GAC/B,MAAoB,kBAANA,IAAmBE,MAAMC,QAAQH,EACjD,CAEM,SAAUI,EAASJ,GACvB,MAAoB,kBAANA,GAAkBA,aAAaK,MAC/C,CAEM,SAAUC,EAAaN,GAC3B,OAAOO,KAAyBP,aAAaQ,IAC/C,C,SAEgBD,IACd,MAAuB,qBAATC,IAChB,CAEM,SAAUC,EACdC,EACAC,EACAC,EACAC,GAEA,GAAIA,EAAQF,EACV,MAAM3G,EACJ,sBAAsB0G,gBAAuBC,iBAGjD,GAAIE,EAAQD,EACV,MAAM5G,EACJ,sBAAsB0G,gBAAuBE,aAGnD;;;;;;;;;;;;;;;;YCtCgBE,EACdC,EACAzF,EACA0F,GAEA,IAAIC,EAAS3F,EAIb,OAHgB,MAAZ0F,IACFC,EAAS,WAAW3F,KAEf,GAAG0F,OAAcC,OAAYF,GACtC,CAEM,SAAUG,EAAgBC,GAC9B,MAAMlG,EAASC,mBACf,IAAIkG,EAAY,IAChB,IAAK,MAAMC,KAAOF,EAChB,GAAIA,EAAOG,eAAeD,GAAM,CAC9B,MAAME,EAAWtG,EAAOoG,GAAO,IAAMpG,EAAOkG,EAAOE,IACnDD,EAAYA,EAAYG,EAAW,G,CAMvC,OADAH,EAAYA,EAAUrF,MAAM,GAAI,GACzBqF,CACT;;;;;;;;;;;;;;;;;ACxBgB,SAAAI,EACd5J,EACA6J,GAIA,MAAMC,EAAoB9J,GAAU,KAAOA,EAAS,IAC9C+J,EAAkB,CAEtB,IAEA,KAEIC,GAAwD,IAArCD,EAAgBE,QAAQjK,GAC3CkK,GAAkE,IAA1CL,EAAqBI,QAAQjK,GAC3D,OAAO8J,GAAqBE,GAAoBE,CAClD;;;;;;;;;;;;;;;;INgCA,SAAY/J,GACVA,EAAAA,EAAA,0BACAA,EAAAA,EAAA,oCACAA,EAAAA,EAAA,mBACD,EAJD,CAAYA,IAAAA,EAIX,KOxBD,MAAMgK,EAUJhL,WAAAA,CACUiL,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAQ,GAXR,KAAIX,KAAJA,EACA,KAAOC,QAAPA,EACA,KAAQC,SAARA,EACA,KAAKC,MAALA,EACA,KAAaC,cAAbA,EACA,KAAqBC,sBAArBA,EACA,KAASC,UAATA,EACA,KAAcC,eAAdA,EACA,KAAQC,SAARA,EACA,KAAiBC,kBAAjBA,EACA,KAAkBC,mBAAlBA,EACA,KAAKC,MAALA,EArBF,KAAkBC,mBAAyB,KAC3C,KAAUC,WAAqB,KAI/B,KAASC,WAAY,EACrB,KAAUC,YAAY,EAiB5BxL,KAAKqG,SAAW,IAAIC,SAAQ,CAACmF,EAASlF,KACpCvG,KAAK0L,SAAWD,EAChBzL,KAAK2L,QAAUpF,EACfvG,KAAK4L,QAAQ,G,CAOTA,MAAAA,GACN,MAAMC,EAGMA,CAACC,EAAiBrK,KAC5B,GAAIA,EAEF,YADAqK,GAAgB,EAAO,IAAIC,GAAiB,EAAO,MAAM,IAG3D,MAAMC,EAAahM,KAAKmL,qBACxBnL,KAAKqL,mBAAqBW,EAE1B,MAAMC,EAEMC,IACV,MAAMC,EAASD,EAAcC,OACvBC,EAAQF,EAAcG,iBAAmBH,EAAcE,OAAS,EACvC,OAA3BpM,KAAKkL,mBACPlL,KAAKkL,kBAAkBiB,EAAQC,E,EAGJ,OAA3BpM,KAAKkL,mBACPc,EAAWM,0BAA0BL,GAKvCD,EACGO,KAAKvM,KAAKyK,KAAMzK,KAAK0K,QAAS1K,KAAK4K,MAAO5K,KAAK2K,UAC/C6B,MAAK,KAC2B,OAA3BxM,KAAKkL,mBACPc,EAAWS,6BAA6BR,GAE1CjM,KAAKqL,mBAAqB,KAC1B,MAAMqB,EAAYV,EAAWW,iBAAmBnM,EAAUoM,SACpDvM,EAAS2L,EAAWa,YAC1B,IACGH,GACAzC,EAAkB5J,EAAQL,KAAK8K,wBAC9B9K,KAAKoL,MACP,CACA,MAAM0B,EAAcd,EAAWW,iBAAmBnM,EAAUuM,MAK5D,YAJAjB,GACE,EACA,IAAIC,GAAiB,EAAO,KAAMe,G,CAItC,MAAME,GAAsD,IAAxChN,KAAK6K,cAAcP,QAAQjK,GAC/CyL,GAAgB,EAAM,IAAIC,EAAiBiB,EAAahB,GAAY,GACpE,EAOAiB,EAGMA,CAACC,EAAoB7M,KAC/B,MAAMoL,EAAUzL,KAAK0L,SACfnF,EAASvG,KAAK2L,QACdK,EAAa3L,EAAO2L,WAC1B,GAAI3L,EAAO8M,eACT,IACE,MAAMC,EAASpN,KAAK+K,UAAUiB,EAAYA,EAAWqB,eACjD7E,EAAU4E,GACZ3B,EAAQ2B,GAER3B,G,CAEF,MAAOvH,GACPqC,EAAOrC,E,MAGT,GAAmB,OAAf8H,EAAqB,CACvB,MAAMsB,EAAM7M,IACZ6M,EAAIvN,eAAiBiM,EAAWuB,eAC5BvN,KAAKgL,eACPzE,EAAOvG,KAAKgL,eAAegB,EAAYsB,IAEvC/G,EAAO+G,E,MAGT,GAAIjN,EAAOoB,SAAU,CACnB,MAAM6L,EAAMtN,KAAKwL,WAAa7I,IAAelB,IAC7C8E,EAAO+G,E,KACF,CACL,MAAMA,EAAM/L,IACZgF,EAAO+G,E,GAKXtN,KAAKuL,UACP0B,GAAY,EAAO,IAAIlB,GAAiB,EAAO,MAAM,IAErD/L,KAAKsL,WAAa3E,EAAMkF,EAAcoB,EAAajN,KAAKiL,S,CAK5DzE,UAAAA,GACE,OAAOxG,KAAKqG,Q,CAIdI,MAAAA,CAAO+G,GACLxN,KAAKuL,WAAY,EACjBvL,KAAKwL,WAAagC,IAAa,EACP,OAApBxN,KAAKsL,YACPjD,EAAKrI,KAAKsL,YAEoB,OAA5BtL,KAAKqL,oBACPrL,KAAKqL,mBAAmBoC,O,QASjB1B,EAMXvM,WAAAA,CACS2N,EACAnB,EACPvK,GAFO,KAAc0L,eAAdA,EACA,KAAUnB,WAAVA,EAGPhM,KAAKyB,WAAaA,C,EAIN,SAAAiM,EACdC,EACAC,GAEkB,OAAdA,GAAsBA,EAAUpK,OAAS,IAC3CmK,EAAQ,iBAAmB,YAAcC,EAE7C,CAEgB,SAAAC,EACdF,EACAG,GAEAH,EAAQ,8BACN,UAAY,OAAAG,QAAe,IAAfA,EAAAA,EAAmB,aACnC,CAEgB,SAAAC,EAAgBJ,EAAkBK,GAC5CA,IACFL,EAAQ,oBAAsBK,EAElC,CAEgB,SAAAC,EACdN,EACAO,GAEsB,OAAlBA,IACFP,EAAQ,uBAAyBO,EAErC,C,SAEgBC,EACdC,EACAJ,EACAJ,EACAM,EACAG,EACAP,EACA1C,GAAQ,GAER,MAAMvB,EAAYF,EAAgByE,EAAYE,WACxC1M,EAAMwM,EAAYxM,IAAMiI,EACxB8D,EAAUzN,OAAOqO,OAAO,CAAC,EAAGH,EAAYT,SAK9C,OAJAI,EAAgBJ,EAASK,GACzBN,EAAeC,EAASC,GACxBC,EAAkBF,EAASG,GAC3BG,EAAmBN,EAASO,GACrB,IAAI1D,EACT5I,EACAwM,EAAYI,OACZb,EACAS,EAAYK,KACZL,EAAYM,aACZN,EAAYlE,qBACZkE,EAAYO,QACZP,EAAYQ,aACZR,EAAYtH,QACZsH,EAAYS,iBACZR,EACAjD,EAEJ;;;;;;;;;;;;;;;;GCtQA,SAAS0D,IACP,MAA2B,qBAAhBC,YACFA,YAC+B,qBAAtBC,kBACTA,uBAEP,CAEJ,CAQgB,SAAAC,MAAW3H,GACzB,MAAMyH,EAAcD,IACpB,QAAoBI,IAAhBH,EAA2B,CAC7B,MAAMI,EAAK,IAAIJ,EACf,IAAK,IAAIlJ,EAAI,EAAGA,EAAIyB,EAAK9D,OAAQqC,IAC/BsJ,EAAGC,OAAO9H,EAAKzB,IAEjB,OAAOsJ,EAAGE,S,CAEV,GAAIrG,IACF,OAAO,IAAIC,KAAK3B,GAEhB,MAAM,IAAIhI,EACRiB,EAAiBiC,wBACjB,sDAIR,C,SAWgB8M,GAAUC,EAAY5I,EAAe6I,GACnD,OAAID,EAAKE,YACAF,EAAKE,YAAY9I,EAAO6I,GACtBD,EAAKG,SACPH,EAAKG,SAAS/I,EAAO6I,GACnBD,EAAK/K,MACP+K,EAAK/K,MAAMmC,EAAO6I,GAEpB,IACT;;;;;;;;;;;;;;;;GC1DM,SAAUG,GAAaC,GAC3B,GAAoB,qBAATC,KACT,MAAMvN,EAAgB,WAExB,OAAOuN,KAAKD,EACd;;;;;;;;;;;;;;;;GCIa,MAAAE,GAAe,CAQ1BC,IAAK,MAOLC,OAAQ,SAORC,UAAW,YAUXC,SAAU,Y,MAGCC,GAGX3Q,WAAAA,CAAmB4Q,EAAkBC,GAAlB,KAAID,KAAJA,EACjBpQ,KAAKqQ,YAAcA,GAAe,I,EAOtB,SAAAC,GACdrN,EACAsN,GAEA,OAAQtN,GACN,KAAK6M,GAAaC,IAChB,OAAO,IAAII,GAAWK,GAAWD,IACnC,KAAKT,GAAaE,OAClB,KAAKF,GAAaG,UAChB,OAAO,IAAIE,GAAWM,GAAaxN,EAAQsN,IAC7C,KAAKT,GAAaI,SAChB,OAAO,IAAIC,GACTO,GAAcH,GACdI,GAAoBJ,IAO1B,MAAM9P,GACR,CAEM,SAAU+P,GAAWlH,GACzB,MAAMsH,EAAc,GACpB,IAAK,IAAI/K,EAAI,EAAGA,EAAIyD,EAAM9F,OAAQqC,IAAK,CACrC,IAAIgL,EAAIvH,EAAMwH,WAAWjL,GACzB,GAAIgL,GAAK,IACPD,EAAEG,KAAKF,QAEP,GAAIA,GAAK,KACPD,EAAEG,KAAK,IAAOF,GAAK,EAAI,IAAW,GAAJA,QAE9B,GAAoB,SAAX,MAAJA,GAAsB,CAEzB,MAAMG,EACJnL,EAAIyD,EAAM9F,OAAS,GAA2C,SAAX,MAA1B8F,EAAMwH,WAAWjL,EAAI,IAChD,GAAKmL,EAGE,CACL,MAAMC,EAAKJ,EACLK,EAAK5H,EAAMwH,aAAajL,GAC9BgL,EAAI,OAAe,KAALI,IAAc,GAAY,KAALC,EACnCN,EAAEG,KACA,IAAOF,GAAK,GACZ,IAAQA,GAAK,GAAM,GACnB,IAAQA,GAAK,EAAK,GAClB,IAAW,GAAJA,E,MATTD,EAAEG,KAAK,IAAK,IAAK,I,MAaC,SAAX,MAAJF,GAEHD,EAAEG,KAAK,IAAK,IAAK,KAEjBH,EAAEG,KAAK,IAAOF,GAAK,GAAK,IAAQA,GAAK,EAAK,GAAK,IAAW,GAAJA,E,CAMhE,OAAO,IAAIM,WAAWP,EACxB,CAEM,SAAUQ,GAAqB9H,GACnC,IAAI+H,EACJ,IACEA,EAAUvM,mBAAmBwE,E,CAC7B,MAAOpF,GACP,MAAMlB,EAAc8M,GAAaI,SAAU,sB,CAE7C,OAAOM,GAAWa,EACpB,CAEgB,SAAAZ,GAAaxN,EAAsBqG,GACjD,OAAQrG,GACN,KAAK6M,GAAaE,OAAQ,CACxB,MAAMsB,GAAmC,IAAxBhI,EAAMgB,QAAQ,KACzBiH,GAAmC,IAAxBjI,EAAMgB,QAAQ,KAC/B,GAAIgH,GAAYC,EAAU,CACxB,MAAMC,EAAcF,EAAW,IAAM,IACrC,MAAMtO,EACJC,EACA,sBACEuO,EACA,oC,CAGN,K,CAEF,KAAK1B,GAAaG,UAAW,CAC3B,MAAMwB,GAAkC,IAAxBnI,EAAMgB,QAAQ,KACxBoH,GAAmC,IAAxBpI,EAAMgB,QAAQ,KAC/B,GAAImH,GAAWC,EAAU,CACvB,MAAMF,EAAcC,EAAU,IAAM,IACpC,MAAMzO,EACJC,EACA,sBAAwBuO,EAAc,iC,CAG1ClI,EAAQA,EAAMrE,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAC/C,K,EAKJ,IAAI0M,EACJ,IACEA,EAAQhC,GAAarG,E,CACrB,MAAOpF,GACP,GAAKA,EAAYxE,QAAQkS,SAAS,YAChC,MAAM1N,EAER,MAAMlB,EAAcC,EAAQ,0B,CAE9B,MAAM4O,EAAQ,IAAIV,WAAWQ,EAAMnO,QACnC,IAAK,IAAIqC,EAAI,EAAGA,EAAI8L,EAAMnO,OAAQqC,IAChCgM,EAAMhM,GAAK8L,EAAMb,WAAWjL,GAE9B,OAAOgM,CACT,CAEA,MAAMC,GAKJtS,WAAAA,CAAYuS,GAJZ,KAAMC,QAAY,EAClB,KAAW3B,YAAkB,KAI3B,MAAM4B,EAAUF,EAAQG,MAAM,mBAC9B,GAAgB,OAAZD,EACF,MAAMjP,EACJ8M,GAAaI,SACb,yDAGJ,MAAMiC,EAASF,EAAQ,IAAM,KACf,MAAVE,IACFnS,KAAKgS,OAASI,GAASD,EAAQ,WAC/BnS,KAAKqQ,YAAcrQ,KAAKgS,OACpBG,EAAOE,UAAU,EAAGF,EAAO3O,OAAS,GACpC2O,GAENnS,KAAKsS,KAAOP,EAAQM,UAAUN,EAAQzH,QAAQ,KAAO,E,EAInD,SAAUoG,GAAc6B,GAC5B,MAAMC,EAAQ,IAAIV,GAAaS,GAC/B,OAAIC,EAAMR,OACDvB,GAAaX,GAAaE,OAAQwC,EAAMF,MAExClB,GAAqBoB,EAAMF,KAEtC,CAEM,SAAU3B,GAAoB4B,GAClC,MAAMC,EAAQ,IAAIV,GAAaS,GAC/B,OAAOC,EAAMnC,WACf,CAEA,SAAS+B,GAASK,EAAWjD,GAC3B,MAAMkD,EAAaD,EAAEjP,QAAUgM,EAAIhM,OACnC,QAAKkP,GAIED,EAAEJ,UAAUI,EAAEjP,OAASgM,EAAIhM,UAAYgM,CAChD;;;;;;;;;;;;;;;;SClNamD,GAKXnT,WAAAA,CAAY4Q,EAAuCwC,GACjD,IAAIC,EAAe,EACfC,EAAmB,GACnB/J,EAAaqH,IACfpQ,KAAK+S,MAAQ3C,EACbyC,EAAQzC,EAAcyC,KACtBC,EAAY1C,EAAc4C,MACjB5C,aAAgB6C,aACrBL,EACF5S,KAAK+S,MAAQ,IAAI5B,WAAWf,IAE5BpQ,KAAK+S,MAAQ,IAAI5B,WAAWf,EAAK8C,YACjClT,KAAK+S,MAAMI,IAAI,IAAIhC,WAAWf,KAEhCyC,EAAO7S,KAAK+S,MAAMvP,QACT4M,aAAgBe,aACrByB,EACF5S,KAAK+S,MAAQ3C,GAEbpQ,KAAK+S,MAAQ,IAAI5B,WAAWf,EAAK5M,QACjCxD,KAAK+S,MAAMI,IAAI/C,IAEjByC,EAAOzC,EAAK5M,QAEdxD,KAAKoT,MAAQP,EACb7S,KAAKqT,MAAQP,C,CAGfD,IAAAA,GACE,OAAO7S,KAAKoT,K,CAGdJ,IAAAA,GACE,OAAOhT,KAAKqT,K,CAGd7O,KAAAA,CAAM8O,EAAmBC,GACvB,GAAIxK,EAAa/I,KAAK+S,OAAQ,CAC5B,MAAMS,EAAWxT,KAAK+S,MAChBU,EAASnE,GAAUkE,EAAUF,EAAWC,GAC9C,OAAe,OAAXE,EACK,KAEF,IAAId,GAAQc,E,CACd,CACL,MAAMjP,EAAQ,IAAI2M,WACfnR,KAAK+S,MAAqBW,OAC3BJ,EACAC,EAAUD,GAEZ,OAAO,IAAIX,GAAQnO,GAAO,E,EAI9B,cAAO6K,IAAW/H,GAChB,GAAI0B,IAAuB,CACzB,MAAM2K,EAA4CrM,EAAKsM,KACpDC,GACKA,aAAelB,GACVkB,EAAId,MAEJc,IAIb,OAAO,IAAIlB,GAAQ1D,GAAQ1H,MAAM,KAAMoM,G,CAClC,CACL,MAAMG,EAA4BxM,EAAKsM,KACpCC,GACKhL,EAASgL,GACJvD,GAAeR,GAAaC,IAAK8D,GAAezD,KAG/CyD,EAAgBd,QAI9B,IAAIgB,EAAc,EAClBD,EAAYE,SAASnC,IACnBkC,GAAelC,EAAMqB,UAAU,IAEjC,MAAMe,EAAS,IAAI9C,WAAW4C,GAC9B,IAAIG,EAAQ,EAMZ,OALAJ,EAAYE,SAASnC,IACnB,IAAK,IAAIhM,EAAI,EAAGA,EAAIgM,EAAMrO,OAAQqC,IAChCoO,EAAOC,KAAWrC,EAAMhM,E,IAGrB,IAAI8M,GAAQsB,GAAQ,E,EAI/BE,UAAAA,GACE,OAAOnU,KAAK+S,K;;;;;;;;;;;;;;;;GC7GV,SAAUqB,GACd3B,GAEA,IAAI4B,EACJ,IACEA,EAAMC,KAAKC,MAAM9B,E,CACjB,MAAOvO,GACP,OAAO,I,CAET,OAAIwE,EAAiB2L,GACZA,EAEA,IAEX;;;;;;;;;;;;;;;;GCZM,SAAUG,GAAO5T,GACrB,GAAoB,IAAhBA,EAAK4C,OACP,OAAO,KAET,MAAM0Q,EAAQtT,EAAK6T,YAAY,KAC/B,IAAe,IAAXP,EACF,MAAO,GAET,MAAMQ,EAAU9T,EAAK4D,MAAM,EAAG0P,GAC9B,OAAOQ,CACT,CAEgB,SAAAC,GAAM/T,EAAcgU,GAClC,MAAMC,EAAqBD,EACxBE,MAAM,KACNC,QAAOC,GAAaA,EAAUxR,OAAS,IACvCyR,KAAK,KACR,OAAoB,IAAhBrU,EAAK4C,OACAqR,EAEAjU,EAAO,IAAMiU,CAExB,CAQM,SAAUK,GAActU,GAC5B,MAAMsT,EAAQtT,EAAK6T,YAAY,IAAK7T,EAAK4C,OAAS,GAClD,OAAe,IAAX0Q,EACKtT,EAEAA,EAAK4D,MAAM0P,EAAQ,EAE9B;;;;;;;;;;;;;;;;GC/BgB,SAAAiB,GAAYC,EAAoB9L,GAC9C,OAAOA,CACT,CAEA,MAAM+L,GAKJ7V,WAAAA,CACS8V,EACPC,EACAC,EACAC,GAHO,KAAMH,OAANA,EAKPtV,KAAKuV,MAAQA,GAASD,EACtBtV,KAAKwV,WAAaA,EAClBxV,KAAKyV,MAAQA,GAASN,E,EAO1B,IAAIO,GAA6B,KAE3B,SAAUC,GAAUC,GACxB,OAAK/M,EAAS+M,IAAaA,EAASpS,OAAS,EACpCoS,EAEAV,GAAcU,EAEzB,C,SAEgBC,KACd,GAAIH,GACF,OAAOA,GAET,MAAMI,EAAqB,GAM3B,SAASC,EACPC,EACAJ,GAEA,OAAOD,GAAUC,E,CATnBE,EAAS/E,KAAK,IAAIsE,GAAgB,WAClCS,EAAS/E,KAAK,IAAIsE,GAAgB,eAClCS,EAAS/E,KAAK,IAAIsE,GAAgB,mBAClCS,EAAS/E,KAAK,IAAIsE,GAAgB,OAAQ,YAAY,IAQtD,MAAMY,EAAc,IAAIZ,GAAgB,QAOxC,SAASa,EACPF,EACAnD,GAEA,YAAa3D,IAAT2D,EACKsD,OAAOtD,GAEPA,C,CAbXoD,EAAYR,MAAQM,EACpBD,EAAS/E,KAAKkF,GAed,MAAMG,EAAc,IAAIf,GAAgB,QAaxC,OAZAe,EAAYX,MAAQS,EACpBJ,EAAS/E,KAAKqF,GACdN,EAAS/E,KAAK,IAAIsE,GAAgB,gBAClCS,EAAS/E,KAAK,IAAIsE,GAAgB,YAClCS,EAAS/E,KAAK,IAAIsE,GAAgB,UAAW,MAAM,IACnDS,EAAS/E,KAAK,IAAIsE,GAAgB,eAAgB,MAAM,IACxDS,EAAS/E,KAAK,IAAIsE,GAAgB,qBAAsB,MAAM,IAC9DS,EAAS/E,KAAK,IAAIsE,GAAgB,kBAAmB,MAAM,IAC3DS,EAAS/E,KAAK,IAAIsE,GAAgB,kBAAmB,MAAM,IAC3DS,EAAS/E,KAAK,IAAIsE,GAAgB,cAAe,MAAM,IACvDS,EAAS/E,KAAK,IAAIsE,GAAgB,WAAY,kBAAkB,IAChEK,GAAYI,EACLJ,EACT,CAEgB,SAAAW,GAAOjB,EAAoBkB,GACzC,SAASC,IACP,MAAMxV,EAAiBqU,EAAS,UAC1BxU,EAAewU,EAAS,YACxB9Q,EAAM,IAAIjB,EAAStC,EAAQH,GACjC,OAAO0V,EAAQE,sBAAsBlS,E,CAEvCpE,OAAOuW,eAAerB,EAAU,MAAO,CAAEsB,IAAKH,GAChD,C,SAEgBI,GACdL,EACAM,EACAd,GAEA,MAAMV,EAAqB,CAC3BA,KAAmB,QACbyB,EAAMf,EAAStS,OACrB,IAAK,IAAIqC,EAAI,EAAGA,EAAIgR,EAAKhR,IAAK,CAC5B,MAAMiR,EAAUhB,EAASjQ,GACzBuP,EAAS0B,EAAQvB,OAAUuB,EAA6BrB,MACtDL,EACAwB,EAASE,EAAQxB,Q,CAIrB,OADAe,GAAOjB,EAAUkB,GACVlB,CACT,C,SAEgB2B,GACdT,EACAU,EACAlB,GAEA,MAAMzB,EAAMD,GAAiB4C,GAC7B,GAAY,OAAR3C,EACF,OAAO,KAET,MAAMuC,EAAWvC,EACjB,OAAOsC,GAAaL,EAASM,EAAUd,EACzC,CAEM,SAAUmB,GACd7B,EACA4B,EACAjT,EACA0F,GAEA,MAAM4K,EAAMD,GAAiB4C,GAC7B,GAAY,OAAR3C,EACF,OAAO,KAET,IAAKxL,EAASwL,EAAI,mBAGhB,OAAO,KAET,MAAM6C,EAAiB7C,EAAI,kBAC3B,GAAsB,IAAlB6C,EAAO1T,OACT,OAAO,KAET,MAAME,EAASC,mBACTwT,EAAaD,EAAOpC,MAAM,KAC1BsC,EAAOD,EAAWvD,KAAKyD,IAC3B,MAAMtW,EAAiBqU,EAAS,UAC1BxU,EAAewU,EAAS,YACxB5L,EAAU,MAAQ9F,EAAO3C,GAAU,MAAQ2C,EAAO9C,GAClD0W,EAAO/N,EAAQC,EAASzF,EAAM0F,GAC9B8N,EAAc5N,EAAgB,CAClC6N,IAAK,QACLH,UAEF,OAAOC,EAAOC,CAAW,IAE3B,OAAOH,EAAK,EACd,CAEgB,SAAAK,GACdrC,EACAU,GAEA,MAAMc,EAEF,CAAC,EACCC,EAAMf,EAAStS,OACrB,IAAK,IAAIqC,EAAI,EAAGA,EAAIgR,EAAKhR,IAAK,CAC5B,MAAMiR,EAAUhB,EAASjQ,GACrBiR,EAAQtB,WACVoB,EAASE,EAAQxB,QAAUF,EAAS0B,EAAQvB,O,CAGhD,OAAOjB,KAAKoD,UAAUd,EACxB;;;;;;;;;;;;;;;;SC3Jae,GAcXnY,WAAAA,CACSoC,EACA4M,EAQAG,EACA7H,GAVA,KAAGlF,IAAHA,EACA,KAAM4M,OAANA,EAQA,KAAOG,QAAPA,EACA,KAAO7H,QAAPA,EAxBT,KAASwH,UAAc,CAAC,EACxB,KAAOX,QAAY,CAAC,EACpB,KAAIc,KAAsC,KAC1C,KAAYG,aAAwB,KAMpC,KAAgBC,iBAA8C,KAC9D,KAAAH,aAAyB,CAAC,KAC1B,KAAoBxE,qBAAa,E;;;;;;;;;;;;;;;;GCV7B,SAAU0N,GAAaC,GAC3B,IAAKA,EACH,MAAMpX,GAEV,CAEgB,SAAAqX,GACdxB,EACAR,GAEA,SAASnH,EAAQoJ,EAAyBC,GACxC,MAAM5C,EAAW2B,GAAmBT,EAAS0B,EAAMlC,GAEnD,OADA8B,GAA0B,OAAbxC,GACNA,C,CAET,OAAOzG,CACT,CAcgB,SAAAsJ,GACd3B,EACAR,GAEA,SAASnH,EAAQoJ,EAAyBC,GACxC,MAAM5C,EAAW2B,GAAmBT,EAAS0B,EAAMlC,GAEnD,OADA8B,GAA0B,OAAbxC,GACN6B,GACL7B,EACA4C,EACA1B,EAAQvS,KACRuS,EAAQ4B,U,CAGZ,OAAOvJ,CACT,CAEM,SAAUwJ,GACdhU,GAEA,SAASyK,EACPmJ,EACAzK,GAEA,IAAI8K,EAwBJ,OAjBIA,EANoB,MAApBL,EAAIlL,YAIJkL,EAAIxK,eAAeqE,SAAS,uCAEnBzQ,IAEAF,IAGa,MAApB8W,EAAIlL,YACG/L,EAAcqD,EAASpD,QAER,MAApBgX,EAAIlL,YACGxL,EAAa8C,EAASvD,MAEtB0M,EAIf8K,EAAO/X,OAAS0X,EAAIlL,YACpBuL,EAAOrY,eAAiBuN,EAAIvN,eACrBqY,C,CAET,OAAOxJ,CACT,CAEM,SAAUyJ,GACdlU,GAEA,MAAMmU,EAASH,GAAmBhU,GAElC,SAASyK,EACPmJ,EACAzK,GAEA,IAAI8K,EAASE,EAAOP,EAAKzK,GAKzB,OAJwB,MAApByK,EAAIlL,cACNuL,EAASzX,EAAewD,EAASvD,OAEnCwX,EAAOrY,eAAiBuN,EAAIvN,eACrBqY,C,CAET,OAAOxJ,CACT,C,SAiFgB2J,GACdjC,EACAnS,EACA2R,GAEA,MAAMtM,EAAUrF,EAASV,gBACnB7B,EAAM2H,EAAQC,EAAS8M,EAAQvS,KAAMuS,EAAQ4B,WAC7C1J,EAAS,MACT1H,EAAUwP,EAAQkC,sBAClBpK,EAAc,IAAIuJ,GACtB/V,EACA4M,EACAyJ,GAAmB3B,EAASR,GAC5BhP,GAGF,OADAsH,EAAYQ,aAAeyJ,GAAmBlU,GACvCiK,CACT,CA0CgB,SAAAqK,GACdrD,EACA7F,GAEA,OACG6F,GAAYA,EAAS,gBACrB7F,GAAQA,EAAKyD,QACd,0BAEJ,C,SAEgB0F,GACdvU,EACAoL,EACA6F,GAEA,MAAMuD,EAAgBzY,OAAOqO,OAAO,CAAC,EAAG6G,GAMxC,OALAuD,EAAc,YAAcxU,EAASvD,KACrC+X,EAAc,QAAUpJ,EAAKsD,OACxB8F,EAAc,iBACjBA,EAAc,eAAiBF,GAAsB,KAAMlJ,IAEtDoJ,CACT,CAKM,SAAUC,GACdtC,EACAnS,EACA2R,EACAvG,EACA6F,GAEA,MAAM5L,EAAUrF,EAASP,sBACnB+J,EAAsC,CAC1C,yBAA0B,aAG5B,SAASkL,IACP,IAAIC,EAAM,GACV,IAAK,IAAIjT,EAAI,EAAGA,EAAI,EAAGA,IACrBiT,GAAY5Q,KAAKC,SAAS4Q,WAAWvU,MAAM,GAE7C,OAAOsU,C,CAET,MAAME,EAAWH,IACjBlL,EAAQ,gBAAkB,+BAAiCqL,EAC3D,MAAMC,EAAYP,GAAmBvU,EAAUoL,EAAM6F,GAC/C8D,EAAiBzB,GAAiBwB,EAAWnD,GAC7CqD,EACJ,KACAH,EADA,4DAIAE,EACA,SACAF,EANA,qBASAC,EAAU,eACV,WACIG,EAAe,SAAWJ,EAAW,KACrCvK,EAAOkE,GAAQtD,QAAQ8J,EAAa5J,EAAM6J,GAChD,GAAa,OAAT3K,EACF,MAAMvM,IAER,MAAMoM,EAAuB,CAAExL,KAAMmW,EAAU,aACzCrX,EAAM2H,EAAQC,EAAS8M,EAAQvS,KAAMuS,EAAQ4B,WAC7C1J,EAAS,OACT1H,EAAUwP,EAAQ+C,mBAClBjL,EAAc,IAAIuJ,GACtB/V,EACA4M,EACAsJ,GAAgBxB,EAASR,GACzBhP,GAMF,OAJAsH,EAAYE,UAAYA,EACxBF,EAAYT,QAAUA,EACtBS,EAAYK,KAAOA,EAAK0F,aACxB/F,EAAYQ,aAAeuJ,GAAmBhU,GACvCiK,CACT;;;;;;;;;;;;;;;;;AC7VA,IAAIkL,GAAyD,KAM7D,MAAeC,GAQb/Z,WAAAA,GAFU,KAAKga,OAAY,EAGzBxZ,KAAKyZ,KAAO,IAAIC,eAChB1Z,KAAK2Z,UACL3Z,KAAK4Z,WAAapZ,EAAUoM,SAC5B5M,KAAK6Z,aAAe,IAAIvT,SAAQmF,IAC9BzL,KAAKyZ,KAAKK,iBAAiB,SAAS,KAClC9Z,KAAK4Z,WAAapZ,EAAUuM,MAC5BtB,GAAS,IAEXzL,KAAKyZ,KAAKK,iBAAiB,SAAS,KAClC9Z,KAAK4Z,WAAapZ,EAAUuZ,cAC5BtO,GAAS,IAEXzL,KAAKyZ,KAAKK,iBAAiB,QAAQ,KACjCrO,GAAS,GACT,G,CAMNc,IAAAA,CACE3K,EACA4M,EACAC,EACAd,GAEA,GAAI3N,KAAKwZ,MACP,MAAMrW,EAAc,iCAItB,GAFAnD,KAAKwZ,OAAQ,EACbxZ,KAAKyZ,KAAKO,KAAKxL,EAAQ5M,GAAK,QACZsN,IAAZvB,EACF,IAAK,MAAM7D,KAAO6D,EACZA,EAAQ5D,eAAeD,IACzB9J,KAAKyZ,KAAKQ,iBAAiBnQ,EAAK6D,EAAQ7D,GAAKiP,YASnD,YALa7J,IAATT,EACFzO,KAAKyZ,KAAKlN,KAAKkC,GAEfzO,KAAKyZ,KAAKlN,OAELvM,KAAK6Z,Y,CAGdlN,YAAAA,GACE,IAAK3M,KAAKwZ,MACR,MAAMrW,EAAc,yCAEtB,OAAOnD,KAAK4Z,U,CAGd/M,SAAAA,GACE,IAAK7M,KAAKwZ,MACR,MAAMrW,EAAc,sCAEtB,IACE,OAAOnD,KAAKyZ,KAAKpZ,M,CACjB,MAAO6D,GACP,OAAQ,C,EAIZmJ,WAAAA,GACE,IAAKrN,KAAKwZ,MACR,MAAMrW,EAAc,wCAEtB,OAAOnD,KAAKyZ,KAAKS,Q,CAGnB3M,YAAAA,GACE,IAAKvN,KAAKwZ,MACR,MAAMrW,EAAc,yCAEtB,OAAOnD,KAAKyZ,KAAKU,U,CAInB1M,KAAAA,GACEzN,KAAKyZ,KAAKhM,O,CAGZ2M,iBAAAA,CAAkBC,GAChB,OAAOra,KAAKyZ,KAAKW,kBAAkBC,E,CAGrC/N,yBAAAA,CAA0BgO,GACA,MAApBta,KAAKyZ,KAAKc,QACZva,KAAKyZ,KAAKc,OAAOT,iBAAiB,WAAYQ,E,CAIlD7N,4BAAAA,CAA6B6N,GACH,MAApBta,KAAKyZ,KAAKc,QACZva,KAAKyZ,KAAKc,OAAOC,oBAAoB,WAAYF,E,EAKjD,MAAOG,WAA0BlB,GACrCI,OAAAA,GACE3Z,KAAKyZ,KAAKiB,aAAe,M,WAIbC,KACd,OAAOrB,GAAsBA,KAAwB,IAAImB,EAC3D;;;;;;;;;;;;;;;;;MCvFaG,GAGXpb,WAAAA,CACUqb,EACR1W,GADQ,KAAQ0W,SAARA,EAIN7a,KAAK8a,UADH3W,aAAoBd,EACLc,EAEAd,EAASY,YAAYE,EAAU0W,EAAS9W,K,CAS7DgV,QAAAA,GACE,MAAO,QAAU/Y,KAAK8a,UAAU/Z,OAAS,IAAMf,KAAK8a,UAAUla,I,CAGtDma,OAAAA,CACRzE,EACAnS,GAEA,OAAO,IAAIyW,GAAUtE,EAASnS,E,CAMhC,QAAI6W,GACF,MAAM7W,EAAW,IAAId,EAASrD,KAAK8a,UAAU/Z,OAAQ,IACrD,OAAOf,KAAK+a,QAAQ/a,KAAK6a,SAAU1W,E,CAMrC,UAAIpD,GACF,OAAOf,KAAK8a,UAAU/Z,M,CAMxB,YAAI6U,GACF,OAAO5V,KAAK8a,UAAUla,I,CAOxB,QAAIkC,GACF,OAAOoS,GAAclV,KAAK8a,UAAUla,K,CAMtC,WAAIqa,GACF,OAAOjb,KAAK6a,Q,CAOd,UAAIrG,GACF,MAAME,EAAUF,GAAOxU,KAAK8a,UAAUla,MACtC,GAAgB,OAAZ8T,EACF,OAAO,KAET,MAAMvQ,EAAW,IAAId,EAASrD,KAAK8a,UAAU/Z,OAAQ2T,GACrD,OAAO,IAAIkG,GAAU5a,KAAK6a,SAAU1W,E,CAMtC+W,YAAAA,CAAapY,GACX,GAA4B,KAAxB9C,KAAK8a,UAAUla,KACjB,MAAMiC,EAAqBC,E,WAwGjBqY,GACdC,EACAhL,EACAgF,GAEAgG,EAAIF,aAAa,eACjB,MAAM9M,EAAcwK,GAClBwC,EAAIH,QACJG,EAAIN,UACJjF,KACA,IAAIlD,GAAQvC,GAAM,GAClBgF,GAEF,OAAOgG,EAAIH,QACRI,sBAAsBjN,EAAauM,IACnCnO,MAAK8O,IACG,CACLlG,SAAUkG,EACVF,SAGR,CA8LM,SAAUG,GAAeH,GAC7BA,EAAIF,aAAa,kBACjB,MAAM9M,EAAcmK,GAClB6C,EAAIH,QACJG,EAAIN,UACJjF,MAEF,OAAOuF,EAAIH,QACRI,sBAAsBjN,EAAauM,IACnCnO,MAAK5K,IACJ,GAAY,OAARA,EACF,MAAMQ,IAER,OAAOR,CAAG,GAEhB,CAwBgB,SAAA4Z,GAAUJ,EAAgBxG,GACxC,MAAMF,EAAUC,GAAMyG,EAAIN,UAAUla,KAAMgU,GACpCzQ,EAAW,IAAId,EAAS+X,EAAIN,UAAU/Z,OAAQ2T,GACpD,OAAO,IAAIkG,GAAUQ,EAAIH,QAAS9W,EACpC;;;;;;;;;;;;;;;;GC9cM,SAAUsX,GAAM7a,GACpB,MAAO,kBAAkB8a,KAAK9a,EAChC,CAKA,SAAS+a,GAAWrF,EAA8B1U,GAChD,OAAO,IAAIgZ,GAAUtE,EAAS1U,EAChC,CAMA,SAASga,GACPR,EACAxa,GAEA,GAAIwa,aAAeS,GAAqB,CACtC,MAAMvF,EAAU8E,EAChB,GAAuB,MAAnB9E,EAAQwF,QACV,MAAM9Z,IAER,MAAM+Z,EAAY,IAAInB,GAAUtE,EAASA,EAAQwF,SACjD,OAAY,MAARlb,EACKgb,GAAYG,EAAWnb,GAEvBmb,C,CAIT,YAAa7M,IAATtO,EACK4a,GAAUJ,EAAKxa,GAEfwa,CAGb,CAqBgB,SAAAY,GACdC,EACAC,GAEA,GAAIA,GAAaT,GAAMS,GAAY,CACjC,GAAID,aAAwBJ,GAC1B,OAAOF,GAAWM,EAAcC,GAEhC,MAAMzZ,EACJ,2E,CAIJ,OAAOmZ,GAAYK,EAAcC,EAErC,CAEA,SAASC,GACPpY,EACAqY,GAEA,MAAMtY,EAAe,OAAAsY,QAAM,IAANA,OAAM,EAANA,EAASjd,GAC9B,OAAoB,MAAhB2E,EACK,KAEFT,EAASQ,mBAAmBC,EAAcC,EACnD,CAEM,SAAUsY,GACdpB,EACAlX,EACAuY,EACAC,EAEI,CAAC,GAELtB,EAAQlX,KAAO,GAAGA,KAAQuY,IAC1BrB,EAAQ/C,UAAY,OACpB,MAAM,cAAEsE,GAAkBD,EACtBC,IACFvB,EAAQwB,mBACmB,kBAAlBD,EACHA,GACAE,EAAAA,EAAAA,IAAoBF,EAAevB,EAAQ0B,IAAIJ,QAAQK,WAEjE,C,MAQaf,GAgBXrc,WAAAA,CAIWmd,EACAE,EAIAC,EAIAC,EACAC,GAVA,KAAGL,IAAHA,EACA,KAAaE,cAAbA,EAIA,KAAiBC,kBAAjBA,EAIA,KAAIC,KAAJA,EACA,KAAgBC,iBAAhBA,EA7BX,KAAOlB,QAAoB,KAMnB,KAAKmB,MAAW/d,EACxB,KAASgZ,UAAW,QACD,KAAMgF,OAAkB,KAEnC,KAAQC,UAAY,EAqB1Bnd,KAAKod,uBAAyBhe,EAC9BY,KAAKqd,oBAAsBhe,EAC3BW,KAAKsd,UAAY,IAAIC,IAEnBvd,KAAK8b,QADK,MAARiB,EACa1Z,EAASQ,mBAAmBkZ,EAAM/c,KAAKid,OAEvCd,GAAcnc,KAAKid,MAAOjd,KAAK2c,IAAIJ,Q,CAQtD,QAAIxY,GACF,OAAO/D,KAAKid,K,CAGd,QAAIlZ,CAAKA,GACP/D,KAAKid,MAAQlZ,EACI,MAAb/D,KAAK+c,KACP/c,KAAK8b,QAAUzY,EAASQ,mBAAmB7D,KAAK+c,KAAMhZ,GAEtD/D,KAAK8b,QAAUK,GAAcpY,EAAM/D,KAAK2c,IAAIJ,Q,CAOhD,sBAAIlD,GACF,OAAOrZ,KAAKqd,mB,CAGd,sBAAIhE,CAAmBmE,GACrBtU,EACE,OACe,EACCiN,OAAOsH,kBACvBD,GAEFxd,KAAKqd,oBAAsBG,C,CAO7B,yBAAIhF,GACF,OAAOxY,KAAKod,sB,CAGd,yBAAI5E,CAAsBgF,GACxBtU,EACE,OACe,EACCiN,OAAOsH,kBACvBD,GAEFxd,KAAKod,uBAAyBI,C,CAGhC,mBAAME,GACJ,GAAI1d,KAAKyc,mBACP,OAAOzc,KAAKyc,mBAEd,MAAMkB,EAAO3d,KAAK6c,cAAce,aAAa,CAAEC,UAAU,IACzD,GAAIF,EAAM,CACR,MAAMG,QAAkBH,EAAKI,WAC7B,GAAkB,OAAdD,EACF,OAAOA,EAAUE,W,CAGrB,OAAO,I,CAGT,uBAAMC,GACJ,MAAMC,EAAWle,KAAK8c,kBAAkBc,aAAa,CAAEC,UAAU,IACjE,GAAIK,EAAU,CACZ,MAAM9Q,QAAe8Q,EAASH,WAK9B,OAAO3Q,EAAOiK,K,CAEhB,OAAO,I,CAMT8G,OAAAA,GAME,OALKne,KAAKmd,WACRnd,KAAKmd,UAAW,EAChBnd,KAAKsd,UAAUtJ,SAAQoK,GAAWA,EAAQ3X,WAC1CzG,KAAKsd,UAAUe,SAEV/X,QAAQmF,S,CAOjB+K,qBAAAA,CAAsBlS,GACpB,OAAO,IAAIsW,GAAU5a,KAAMsE,E,CAO7Bga,YAAAA,CACElQ,EACAC,EACAT,EACAM,EACA9C,GAAQ,GAER,GAAKpL,KAAKmd,SAkBR,OAAO,IAAIhX,EAAYxD,KAlBL,CAClB,MAAMyb,EAAUjQ,EACdC,EACApO,KAAKkd,OACLtP,EACAM,EACAG,EACArO,KAAKgd,iBACL5R,GAQF,OANApL,KAAKsd,UAAUiB,IAAIH,GAEnBA,EAAQ5X,aAAagG,MACnB,IAAMxM,KAAKsd,UAAUkB,OAAOJ,KAC5B,IAAMpe,KAAKsd,UAAUkB,OAAOJ,KAEvBA,C,EAMX,2BAAM/C,CACJjN,EACAC,GAEA,MAAOT,EAAWM,SAAuB5H,QAAQmY,IAAI,CACnDze,KAAK0d,gBACL1d,KAAKie,sBAGP,OAAOje,KAAKse,aACVlQ,EACAC,EACAT,EACAM,GACA1H,Y,2CCnUOkY,GAAe,U,SC+FZC,GACdvD,EACAhL,EACAgF,GAGA,OADAgG,GAAMwD,EAAAA,EAAAA,IAAmBxD,GAClBD,GACLC,EACAhL,EACAgF,EAEJ,CA8IM,SAAUyJ,GAAezD,GAE7B,OADAA,GAAMwD,EAAAA,EAAAA,IAAmBxD,GAClBG,GAAuBH,EAChC,CAgCgB,SAAAA,GACda,EACAC,GAGA,OADAD,GAAe2C,EAAAA,EAAAA,IAAmB3C,GAC3BD,GACLC,EACAC,EAEJ,C,SAiBgB4C,GACdnC,GAAmBoC,EAAAA,EAAAA,MACnBC,GAEArC,GAAMiC,EAAAA,EAAAA,IAAmBjC,GACzB,MAAMsC,GAAuCC,EAAAA,EAAAA,IAAavC,EAAK+B,IACzDS,EAAkBF,EAAgBrB,aAAa,CACnDwB,WAAYJ,IAERK,GAAWC,EAAAA,EAAAA,IAAkC,WAInD,OAHID,GACFE,GAAuBJ,KAAoBE,GAEtCF,CACT,CAYM,SAAUI,GACdtE,EACAlX,EACAuY,EACAC,EAEI,CAAC,GAELF,GAAwBpB,EAAgClX,EAAMuY,EAAMC,EACtE;;;;;;;;;;;;;;;;GC/TA,SAASiD,GACPC,GACEC,mBAAoB9d,IAEtB,MAAM+a,EAAM8C,EAAUE,YAAY,OAAO/B,eACnCgC,EAAeH,EAAUE,YAAY,iBACrCE,EAAmBJ,EAAUE,YAAY,sBAE/C,OAAO,IAAI9D,GACTc,EACAiD,EACAC,EACAje,EACAke,EAAAA,GAEJ,CAEA,SAASC,MACPC,EAAAA,EAAAA,IACE,IAAIC,EAAAA,GACFvB,GACAc,GAED,UAACU,sBAAqB,KAGzBC,EAAAA,EAAAA,IAAgBrd,GAAMiC,GAAS,KAE/Bob,EAAAA,EAAAA,IAAgBrd,GAAMiC,GAAS,UACjC,CAEAgb,I","sources":["webpack://soul/../src/implementation/constants.ts","webpack://soul/../src/implementation/error.ts","webpack://soul/../src/implementation/connection.ts","webpack://soul/../src/implementation/location.ts","webpack://soul/../src/implementation/failrequest.ts","webpack://soul/../src/implementation/backoff.ts","webpack://soul/../src/implementation/type.ts","webpack://soul/../src/implementation/url.ts","webpack://soul/../src/implementation/utils.ts","webpack://soul/../src/implementation/request.ts","webpack://soul/../src/implementation/fs.ts","webpack://soul/../src/platform/browser/base64.ts","webpack://soul/../src/implementation/string.ts","webpack://soul/../src/implementation/blob.ts","webpack://soul/../src/implementation/json.ts","webpack://soul/../src/implementation/path.ts","webpack://soul/../src/implementation/metadata.ts","webpack://soul/../src/implementation/requestinfo.ts","webpack://soul/../src/implementation/requests.ts","webpack://soul/../src/platform/browser/connection.ts","webpack://soul/../src/reference.ts","webpack://soul/../src/service.ts","webpack://soul/../src/constants.ts","webpack://soul/../src/api.ts","webpack://soul/../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | ReadableStream<Uint8Array>;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = (typeof StringFormat)[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\nimport { RequestInfo } from './implementation/requestinfo';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo: RequestInfo<ReadableStream, ReadableStream> = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  // Transforms the stream so that only `maxDownloadSizeBytes` bytes are piped to the result\n  const newMaxSizeTransform = (n: number): Transformer => {\n    let missingBytes = n;\n    return {\n      transform(chunk, controller: TransformStreamDefaultController) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          controller.enqueue(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          controller.enqueue(chunk.slice(0, missingBytes));\n          controller.terminate();\n        }\n      }\n    };\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new TransformStream(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new TransformStream(); // The default transformer forwards all chunks to its readable side\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(readableStream => readableStream.pipeThrough(result))\n    .catch(err => result.writable.abort(err));\n\n  return result.readable;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retrieved, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retrieved, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"],"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","FirebaseError","constructor","code","message","status_","super","prependCode","customData","serverResponse","this","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","StorageErrorCode","ErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","undefined","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getDownloadUrl","maxOperationRetryTime","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","getResponseHeader","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","Reference","_service","_location","_newRef","root","storage","_throwIfRoot","uploadBytes$1","ref","makeRequestWithTokens","finalMetadata","getDownloadURL$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","reference","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","port","options","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","_getAuthToken","auth","getImmediate","optional","tokenData","getToken","accessToken","_getAppCheckToken","appCheck","_delete","request","clear","_makeRequest","add","delete","all","STORAGE_TYPE","uploadBytes","getModularInstance","getDownloadURL","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectStorageEmulator","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","setMultipleInstances","registerVersion"],"sourceRoot":""}